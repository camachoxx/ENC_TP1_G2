sigma2=100
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,0.2)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
n=17;
n2=3;
mu=0;
mu2=0;
sigma2=100
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,0.2)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
set.seed(123)
n=17;
n2=3;
mu=0;
mu2=0;
sigma2=100
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,0.2)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
rnorm(10,0,10)
rnorm(10,0,10)
rnorm(10,0,10)
set.seed(123)
n=20;
mu=6;
trimming = 0.05
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
media[i] = mean(x)
tmean[i] = mean(x,trimming)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
set.seed(123)
n=17;
n2=3;
mu=0;
mu2=6;
sigma2=1;
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,0.2)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
set.seed(123)
n=17;
n2=3;
mu=0;
mu2=6;
trim = 0.05;
sigma2=1;
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,trim)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
set.seed(123)
n=20; mu=0; sigma=1;
alpha=0.05;
t05=qt(1-alpha/2,n-1);
nsim=1000
ci.lower = ci.upper = numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
m=mean(x); s=sd(x)
ci.lower[i]=m-t05*s/sqrt(n); ci.upper[i]=m+t05*s/sqrt(n) }
coverage=mean(ci.lower<=mu & ci.upper>=mu)
coverage
# 0.946
# assessing if this coverage differs significantly from the stated 95% binom.test(0.946*1000,1000,0.95)$p.value
binom.test(0.946*1000,1000,0.95)$p.value
binom.test(0.946*1000,1000,0.95)
# now let's use less simulations
nsim=100
t05=qt(1-alpha/2,n-1);
nsim=1000
ci.lower = ci.upper = numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
m=mean(x); s=sd(x)
ci.lower[i]=m-t05*s/sqrt(n);
ci.upper[i]=m+t05*s/sqrt(n)
}
coverage=mean(ci.lower<=mu & ci.upper>=mu)
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
binom.test(0.946*1000,1000,0.95)#$p.value
binom.test(0.946*nsim,nsim,0.95)#$p.value
binom.test(0.946*nsim,nsim,0.95)#$p.value
binom.test(coverage*nsim,nsim,0.95)#$p.value
# assessing if this coverage differs significantly from the stated 95%
binom.test(coverage*nsim,nsim,0.95)$p.value
binom.test(coverage*nsim,nsim,0.95)
binom.test(coverage*nsim,nsim,0.95)$p.value
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
nsim=100
t05=qt(1-alpha/2,n-1);
ci.lower = ci.upper = numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
m=mean(x); s=sd(x)
ci.lower[i]=m-t05*s/sqrt(n);
ci.upper[i]=m+t05*s/sqrt(n)
}
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
# assessing if this coverage differs significantly from the stated 95%
binom.test(coverage*nsim,nsim,0.95)$p.value
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
set.seed(123)
nsim=100
t05=qt(1-alpha/2,n-1);
ci.lower = ci.upper = numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
m=mean(x); s=sd(x)
ci.lower[i]=m-t05*s/sqrt(n);
ci.upper[i]=m+t05*s/sqrt(n)
}
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
binom.test(coverage*nsim,nsim,0.95)$p.value
binom.test(coverage*nsim,nsim,0.95)$p.value
coverage=mean(ci.lower<=mu & ci.upper>=mu); coverage
set.seed(123)
n=17;
n2=3;
mu=0;
mu2=6;
trim = 0.05;
sigma2=1;
sigma=1;
m=1000 # number of groups of samples to generate
media=tmean=mediana=numeric(m)
for (i in 1:m){
x = rnorm(n,mu, sigma)
x = c(x,rnorm(n2,mu2,sigma2))
media[i] = mean(x)
tmean[i] = mean(x,trim)
mediana[i] = median(x)
}
mean(media); mean(tmean); mean(mediana)
# -0.005739077 # -0.006809403 # -0.001403801
msemedia=sum((media-mu)**2)/m
msetmean=sum((tmean-mu)**2)/m
msemediana=sum((mediana-mu)**2)/m
c(msemedia,msetmean,msemediana)
# slide 22/57
set.seed(123)
ci.lower <- vector()
n=100
for(i in 1:1000){
tty <- rnorm(n,0,1)
ci.lower <- c(ci.lower, (n-1) * var(tty) / qchisq(0.975,df=n-1))
}
coverage=mean(1>=ci.lower) # 0.977
binom.test(coverage*1000,1000,0.975)$p.value
coverage=mean(1>=ci.lower); coverage
binom.test(coverage*1000,1000,0.975)$p.value
# slide 22/57
set.seed(123)
ci.lower <- vector()
n=100
for(i in 1:1000){
tty <- rnorm(n,0,1)
ci.lower <- c(ci.lower, (n-1) * var(tty) / qchisq(0.975,df=n-1))
}
coverage=mean(1>=ci.lower); coverage
binom.test(coverage*1000,1000,0.975)$p.value
set.seed(123)
qui <- vector()
n=100
for(i in 1:1000){
tty <- rnorm(n,0,1)
qui <- c(qui,(n-1)*var(tty)/1)
}
a <- ecdf(qui)
plot(a,xlim=c(0,200),main="ECDF",ylab="probability",cex=2,lwd=1.5)
lines(seq(0, 200, by=.1),pchisq(seq(0, 200, by=.1),n-1), col=2)
legend(0, 0.95, legend=c("ecdf","cdf"),col=c("black","red"),lty=1,lwd=c(1.5,1), cex=0.8)
ks.test(qui,pchisq,n-1)$p.value
set.seed(123)
ci.lower <- vector()
n=100
var_x = 3
for(i in 1:1000){
tty <- rt(n,df=3)
ci.lower <- c(ci.lower, (n-1) * var_x / qchisq(0.975,df=n-1))
}
coverage=mean(1>=ci.lower); coverage
binom.test(coverage*1000,1000,0.975)$p.value
ci.lower
# slide 24/57
set.seed(123)
ci.lower <- vector()
n=100
var_x = 3
for(i in 1:1000){
tty <- rt(n,df=3)
ci.lower <- c(ci.lower, (n-1) * var(tty) / qchisq(0.975,df=n-1))
}
coverage=mean(1>=ci.lower); coverage
binom.test(coverage*1000,1000,0.975)$p.value
set.seed(123)
qui <- vector()
n=100
for(i in 1:1000){
tty <- rt(n,df=3)
qui <- c(qui,(n-1)*var(tty)/1)
}
a <- ecdf(qui)
plot(a,xlim=c(0,200),main="ECDF",ylab="probability",cex=2,lwd=1.5)
lines(seq(0, 200, by=.1),pchisq(seq(0, 200, by=.1),n-1), col=2)
legend(0, 0.95, legend=c("ecdf","cdf"),col=c("black","red"),lty=1,lwd=c(1.5,1), cex=0.8)
ks.test(qui,pchisq,n-1)$p.value
# slide 24/57
set.seed(123)
ci.lower <- vector()
n=100
var_x = 3
for(i in 1:1000){
tty <- rt(n,df=3)
ci.lower <- c(ci.lower, (n-1) * var(tty) / qchisq(0.975,df=n-1))
}
coverage=mean(1>=ci.lower); coverage
binom.test(coverage*1000,1000,0.975)$p.value
set.seed(123)
qui <- vector()
n=100
for(i in 1:1000){
tty <- rt(n,df=3)
qui <- c(qui,(n-1)*var(tty)/3)
}
a <- ecdf(qui)
plot(a,xlim=c(0,200),main="ECDF",ylab="probability",cex=2,lwd=1.5)
lines(seq(0, 200, by=.1),pchisq(seq(0, 200, by=.1),n-1), col=2)
legend(0, 0.95, legend=c("ecdf","cdf"),col=c("black","red"),lty=1,lwd=c(1.5,1), cex=0.8)
ks.test(qui,pchisq,n-1)$p.value
# slide 32/57
# Exemplo 4
nsim=1000; n=20; alpha=0.05; mu0=500; sigma=100 set.seed(123);
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma) Z=(mean(x)-mu0)/(sigma/sqrt(n)) p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
# slide 32/57
# Exemplo 4
nsim=1000; n=20; alpha=0.05; mu0=500; sigma=100 set.seed(123);
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma) Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
# slide 32/57
# Exemplo 4
nsim=1000; n=20; alpha=0.05; mu0=500; sigma=100
set.seed(123);
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma) Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
# slide 32/57
# Exemplo 4
nsim=1000; n=20; alpha=0.05; mu0=500; sigma=100;
set.seed(123);
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma) Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
# slide 32/57
# Exemplo 4
nsim=1000; n=20; alpha=0.05; mu0=500; sigma=100;
set.seed(123);
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
# slide 32/57
# Exemplo 4
set.seed(123);
# slide 32/57
# Exemplo 4
set.seed(123);
nsim=1000;
n=20;
alpha=0.05;
mu0=500;
sigma=100;
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
binom.test(phat*nsim,nsim,p=0.05)
nsim=1000; n=20; mu0=500; sigma=100;
mu1=seq(510,650,by=10);
nmu=length(mu1)
power=vector()
set.seed(123)
for(mu in mu1){
set.seed(789) p=vector()
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
power=c(power,mean(p<alpha))
}
plot(mu1,power,pch=19,cex=1.5,xlab=expression(mu),ylab="Power",cex.lab=1.5) lines(mu1,power,type="l")
box(lwd=2)
nsim=1000; n=20; mu0=500; sigma=100;
mu1=seq(510,650,by=10);
nmu=length(mu1)
power=vector()
set.seed(123)
for(mu in mu1){
set.seed(789) p=vector()
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
power=c(power,mean(p<alpha))
}
plot(mu1,power,pch=19,cex=1.5,xlab=expression(mu),ylab="Power",cex.lab=1.5)
lines(mu1,power,type="l")
box(lwd=2)
# slide 32/57
# Exemplo 4
set.seed(123);
nsim=1000;
n=20;
alpha=0.05;
mu0=500;
sigma=100;
p=numeric(nsim)
for(i in 1:nsim){
x=rnorm(n,mu0,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
phat=mean(p<alpha); phat
binom.test(phat*nsim,nsim,p=0.05)
#falta indicar a potencia do teste
nsim=1000; n=20; mu0=500; sigma=100;
mu1=seq(510,650,by=10);
nmu=length(mu1)
power=vector()
set.seed(123)
for(mu in mu1){
set.seed(789) p=vector()
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
power=c(power,mean(p<alpha))
}
plot(mu1,power,pch=19,cex=1.5,xlab=expression(mu),ylab="Power",cex.lab=1.5)
lines(mu1,power,type="l")
box(lwd=2)
nsim=1000; n=20; mu0=500; sigma=100;
mu1=seq(510,650,by=10);
nmu=length(mu1)
power=vector()
set.seed(123)
for(mu in mu1){
set.seed(789)
p=vector()
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
power=c(power,mean(p<alpha))
}
plot(mu1,power,pch=19,cex=1.5,xlab=expression(mu),ylab="Power",cex.lab=1.5)
lines(mu1,power,type="l")
box(lwd=2)
n=50
mu1=seq(510,650,by=10);
nmu=length(mu1)
power=vector()
set.seed(123)
for(mu in mu1){
set.seed(789)
p=vector()
for(i in 1:nsim){
x=rnorm(n,mu,sigma)
Z=(mean(x)-mu0)/(sigma/sqrt(n))
p[i]=1-pnorm(Z,0,1)
}
power=c(power,mean(p<alpha))
}
plot(mu1,power,pch=19,cex=1.5,xlab=expression(mu),ylab="Power",cex.lab=1.5)
lines(mu1,power,type="l")
box(lwd=2)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
f = function(x) {3 * exp(-3*x)}
g = function(x) {exp(-x^2)}
h = function(x) {f(x) * g(x)}
integrate(h,0,Inf)$value
set.seed(1234)
f = function(x) {3 * exp(-3*x)}
g = function(x) {exp(-x^2)}
h = function(x) {f(x) * g(x)}
integrate(h,0,Inf)$value
h = function(x) {f(x) * g(x) ^2}
e_g_squared = integrate(h,0,Inf)$value
h = function(x) {f(x) * g(x) ^2}
a = integrate(h,0,Inf)$value; a
install.packages(c("bookdown","plotly","dplyr"))
install.packages("bookdown")
install.packages("bookdown")
library(bookdown)
detach("package:bookdown", unload = TRUE)
install.packages("tinytex")
setwd("/Users/simaonovais/Desktop/Mestrado/2-ano/1-semestre/ENC/TP1/ENC_TP1_G2")
gen_exp = function(n, lambda){
x_vector = runif(n,0,1)
e_vector = -1/lambda * log(x_vector)
return(e_vector)
}
n = 1000
R_squared_vector = gen_exp(n,0.5)
plot(R_squared_vector)
hist(R_squared_vector)
plot(R_squared_vector, pdf_xy(R_squared_vector))
pdf_xy = function(R_squared){
return(1/sqrt(2*pi) * exp(-0.5*R_squared))
}
plot(R_squared_vector, pdf_xy(R_squared_vector))
